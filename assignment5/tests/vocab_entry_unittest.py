import unittest
import vocab
import torch

class TestVocabEntry(unittest.TestCase):

    def setUp(self):
        self.ve = vocab.VocabEntry()

    def test_empty_sentences(self):
        sentences = []
        self.assertEqual(self.ve.words2charindices(sentences), [], "Should be []")

    def test_single_sentence(self):
        sentences = [["i", "ate", "an", "apple"]]
        self.assertEqual(self.ve.words2charindices(sentences), [[[1, 38, 2], [1, 30, 49, 34, 2], [1, 30, 43, 2], [1, 30, 45, 45, 41, 34, 2]]], "Should be [[[1, 38, 2], [1, 30, 49, 34, 2], [1, 30, 43, 2], [1, 30, 45, 45, 41, 34, 2]]]")

    def test_complex_sentences(self):
        s = "Billy Martin (1928â€“1989) was an American Major League Baseball second baseman and the on-again, off-again manager of the New York Yankees. Known first as a scrappy infielder on the championship Yankee teams of the 1950s, he built a reputation as a manager who would initially make bad teams good, and then be fired amid dysfunction. In each of his stints with the Yankees, he led them to winning records before being fired or forced to resign by team owner George Steinbrenner. Martin led the team to consecutive American League pennants in 1976 and 1977; they lost in the 1976 World Series but triumphed over the Los Angeles Dodgers in 1977, Martin's only World Series championship as a manager."
        result = [[[1, 5, 38, 41, 41, 54, 2], [1, 16, 30, 47, 49, 38, 43, 2], [1, 92, 57, 65, 58, 64, 3, 57, 65, 64, 65, 93, 2], [1, 52, 30, 48, 2], [1, 30, 43, 2], [1, 4, 42, 34, 47, 38, 32, 30, 43, 2], [1, 16, 30, 39, 44, 47, 2], [1, 15, 34, 30, 36, 50, 34, 2], [1, 5, 30, 48, 34, 31, 30, 41, 41, 2], [1, 48, 34, 32, 44, 43, 33, 2], [1, 31, 30, 48, 34, 42, 30, 43, 2], [1, 30, 43, 33, 2], [1, 49, 37, 34, 2], [1, 44, 43, 88, 30, 36, 30, 38, 43, 66, 2], [1, 44, 35, 35, 88, 30, 36, 30, 38, 43, 2], [1, 42, 30, 43, 30, 36, 34, 47, 2], [1, 44, 35, 2], [1, 49, 37, 34, 2], [1, 17, 34, 52, 2], [1, 28, 44, 47, 40, 2], [1, 28, 30, 43, 40, 34, 34, 48, 2]], [[1, 14, 43, 44, 52, 43, 2], [1, 35, 38, 47, 48, 49, 2], [1, 30, 48, 2], [1, 30, 2], [1, 48, 32, 47, 30, 45, 45, 54, 2], [1, 38, 43, 35, 38, 34, 41, 33, 34, 47, 2], [1, 44, 43, 2], [1, 49, 37, 34, 2], [1, 32, 37, 30, 42, 45, 38, 44, 43, 48, 37, 38, 45, 2], [1, 28, 30, 43, 40, 34, 34, 2], [1, 49, 34, 30, 42, 48, 2], [1, 44, 35, 2], [1, 49, 37, 34, 2], [1, 57, 65, 61, 56, 48, 66, 2], [1, 37, 34, 2], [1, 31, 50, 38, 41, 49, 2], [1, 30, 2], [1, 47, 34, 45, 50, 49, 30, 49, 38, 44, 43, 2], [1, 30, 48, 2], [1, 30, 2], [1, 42, 30, 43, 30, 36, 34, 47, 2], [1, 52, 37, 44, 2], [1, 52, 44, 50, 41, 33, 2], [1, 38, 43, 38, 49, 38, 30, 41, 41, 54, 2], [1, 42, 30, 40, 34, 2], [1, 31, 30, 33, 2], [1, 49, 34, 30, 42, 48, 2], [1, 36, 44, 44, 33, 66, 2], [1, 30, 43, 33, 2], [1, 49, 37, 34, 43, 2], [1, 31, 34, 2], [1, 35, 38, 47, 34, 33, 2], [1, 30, 42, 38, 33, 2], [1, 33, 54, 48, 35, 50, 43, 32, 49, 38, 44, 43, 2]], [[1, 12, 43, 2], [1, 34, 30, 32, 37, 2], [1, 44, 35, 2], [1, 37, 38, 48, 2], [1, 48, 49, 38, 43, 49, 48, 2], [1, 52, 38, 49, 37, 2], [1, 49, 37, 34, 2], [1, 28, 30, 43, 40, 34, 34, 48, 66, 2], [1, 37, 34, 2], [1, 41, 34, 33, 2], [1, 49, 37, 34, 42, 2], [1, 49, 44, 2], [1, 52, 38, 43, 43, 38, 43, 36, 2], [1, 47, 34, 32, 44, 47, 33, 48, 2], [1, 31, 34, 35, 44, 47, 34, 2], [1, 31, 34, 38, 43, 36, 2], [1, 35, 38, 47, 34, 33, 2], [1, 44, 47, 2], [1, 35, 44, 47, 32, 34, 33, 2], [1, 49, 44, 2], [1, 47, 34, 48, 38, 36, 43, 2], [1, 31, 54, 2], [1, 49, 34, 30, 42, 2], [1, 44, 52, 43, 34, 47, 2], [1, 10, 34, 44, 47, 36, 34, 2], [1, 22, 49, 34, 38, 43, 31, 47, 34, 43, 43, 34, 47, 2]], [[1, 16, 30, 47, 49, 38, 43, 2], [1, 41, 34, 33, 2], [1, 49, 37, 34, 2], [1, 49, 34, 30, 42, 2], [1, 49, 44, 2], [1, 32, 44, 43, 48, 34, 32, 50, 49, 38, 51, 34, 2], [1, 4, 42, 34, 47, 38, 32, 30, 43, 2], [1, 15, 34, 30, 36, 50, 34, 2], [1, 45, 34, 43, 43, 30, 43, 49, 48, 2], [1, 38, 43, 2], [1, 57, 65, 63, 62, 2], [1, 30, 43, 33, 2], [1, 57, 65, 63, 63, 67, 2], [1, 49, 37, 34, 54, 2], [1, 41, 44, 48, 49, 2], [1, 38, 43, 2], [1, 49, 37, 34, 2], [1, 57, 65, 63, 62, 2], [1, 26, 44, 47, 41, 33, 2], [1, 22, 34, 47, 38, 34, 48, 2], [1, 31, 50, 49, 2], [1, 49, 47, 38, 50, 42, 45, 37, 34, 33, 2], [1, 44, 51, 34, 47, 2], [1, 49, 37, 34, 2], [1, 15, 44, 48, 2], [1, 4, 43, 36, 34, 41, 34, 48, 2], [1, 7, 44, 33, 36, 34, 47, 48, 2], [1, 38, 43, 2], [1, 57, 65, 63, 63, 66, 2], [1, 16, 30, 47, 49, 38, 43, 72, 48, 2], [1, 44, 43, 41, 54, 2], [1, 26, 44, 47, 41, 33, 2], [1, 22, 34, 47, 38, 34, 48, 2], [1, 32, 37, 30, 42, 45, 38, 44, 43, 48, 37, 38, 45, 2], [1, 30, 48, 2], [1, 30, 2], [1, 42, 30, 43, 30, 36, 34, 47, 68, 2]]]
        self.assertEqual(self.ve.words2charindices([x.split(" ") for x in s.split(". ")]), result, "Incorrect result")

    def test_to_input_tensor_char(self):
        text = "I ate an apple. I want one more apple to eat. Apples are nice"
        sents = [s.split(" ") for s in text.split(". ")]
        tensor = self.ve.to_input_tensor_char(sents, None)
        self.assertEqual(list(tensor.size()), [7, 3, 21], "Size is incorrect")

if __name__ == '__main__':
    unittest.main()